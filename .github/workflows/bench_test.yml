name: bench_test
on:
  push:
    branches: [ci]
  pull_request:
    branches: [ci]
  workflow_dispatch:
jobs:
  bench:
    runs-on: ${{ matrix.os }}
    env:
      PROFILE: /tmp/.tmpprofile
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        # lang: [csharp, dart, go, haskell, haxe, java, javascript, julia, kotlin, lua, nim, ocaml, python, ruby, rust, swift, typescript, vlang]
        # lang: [csharp, dart, go, haskell, java, javascript, julia, kotlin, lua, nim, ocaml, python, ruby, rust, swift, typescript, vlang]
        lang: [ocaml]
    steps:
      - uses: actions/checkout@v2
      - name: Install lua
        if: matrix.lang == 'lua'
        run: |
          cd /tmp
          sudo apt-get install lua5.3 -y
          lua -v
          git clone https://github.com/LuaJIT/LuaJIT
          cd LuaJIT
          make && sudo make install
          sudo ln -sf luajit-2.1.0-beta3 /usr/local/bin/luajit
          luajit -v
      - name: Install python
        if: matrix.lang == 'python'
        run: |
          cd /tmp
          wget https://github.com/pyston/pyston/releases/download/v2.1/pyston_2.1_20.04.deb
          sudo apt install -y ./pyston_2.1_20.04.deb
          pyston -V
      - name: Install ruby
        if: matrix.lang == 'ruby'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0.0 # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
#         run: |
#           sudo apt-get install rbenv -y
#           echo 'eval "$(rbenv init -)"' >> $PROFILE
#           source $PROFILE
#           git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build
#           rbenv install 3.0.0
#           rbenv global 3.0.0
#           ruby --version
      - name: Install dart
        if: matrix.lang == 'dart'
        run: |
          sudo sh -c 'wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
          sudo sh -c 'wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'
          sudo apt-get update -y
          sudo apt-get install dart -y
          echo 'export PATH="$PATH:/usr/lib/dart/bin"' >> $PROFILE
      - name: Install vlang
        if: matrix.lang == 'vlang'
        run: |
          docker run --rm -v /tmp/hostlib/:/working/ -w /working/ thevlang/vlang:alpine cp /lib/ld-musl-x86_64.so.1 .
          sudo cp /tmp/hostlib/ld-musl-x86_64.so.1 /lib/
      - name: Install deno
        if: matrix.lang == 'typescript'
        run: |
          curl -fsSL https://deno.land/x/install/install.sh | sh
          echo 'export PATH=$HOME/.deno/bin:$PATH' >> $PROFILE
      - name: Install haskell
        if: matrix.lang == 'haskell'
        run: |
          stack upgrade
      - name: Install wasm
        if: matrix.lang == 'rust'
        run: |
          curl https://get.wasmer.io -sSfL | sh
          cat $HOME/.wasmer/wasmer.sh >> $PROFILE
          curl https://wasmtime.dev/install.sh -sSf | bash
          echo 'PATH=$HOME/.wasmtime/bin:$PATH' >> $PROFILE
          cat $PROFILE
      - name: Install
        run: | 
          echo '# placeholder' >> $PROFILE
          sudo chmod 666 /var/run/docker.sock
      - name: Build
        run: |
          source $PROFILE
          pushd bench
          dotnet run -c Release -p tool -- --task build --langs ${{ matrix.lang }} 
          popd
      - name: Test
        run: |
          source $PROFILE
          pushd bench
          dotnet run -c Release -p tool -- --task test --langs ${{ matrix.lang }} 
          popd
      - name: Bench
        run: |
          source $PROFILE
          pushd bench
          dotnet run -c Release -p tool -- --task bench --langs ${{ matrix.lang }} 
          popd
      - uses: actions/upload-artifact@v2
        with:
          name: log
          path: bench/build/_results/**/*.json
          if-no-files-found: error
