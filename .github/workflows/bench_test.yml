name: bench_test
on:
  push:
    branches: [ci]
  pull_request:
    branches: [ci]
  workflow_dispatch:
jobs:
  bench:
    runs-on: ${{ matrix.os }}
    env:
      PROFILE: /tmp/.tmpprofile
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        # lang: [c, cpp, csharp, crystal, dart, elixir, fortran, go, haskell, haxe, java, javascript, julia, kotlin, lua, nim, ocaml, python, ruby, rust, swift, typescript, vlang, zig]
        lang: [fortran]
    steps:
      - uses: actions/checkout@v2
      - name: Install
        run: |
          echo '# placeholder' >> $PROFILE
      - name: Install graal
        if: matrix.lang == 'java' || matrix.lang == 'javascript' || matrix.lang == 'python' || matrix.lang == 'ruby'
        run: |
          echo '# placeholder' >> $PROFILE
          # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          # https://www.graalvm.org/docs/getting-started/
          echo $GRAALVM_11_ROOT
          # ls -al $GRAALVM_11_ROOT
          # sudo ln -sf $GRAALVM_11_ROOT $HOME/graalvm-ce-java11
          wget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.1.0/graalvm-ce-java11-linux-amd64-21.1.0.tar.gz
          tar -xvf graalvm-ce-java11-linux-amd64-21.1.0.tar.gz
          sudo ln -sf $PWD/graalvm-ce-java11-21.1.0 $HOME/graalvm-ce-java11
          ls -al $HOME/graalvm-ce-java11
          sudo ln -sf $HOME/graalvm-ce-java11/bin/gu /usr/bin/gu
          gu --version
          # sudo gu upgrade -A
          # gu --version
          sudo ln -sf $HOME/graalvm-ce-java11/bin/java /usr/bin/graaljava
          graaljava -version
          sudo ln -sf $HOME/graalvm-ce-java11/bin/javac /usr/bin/graaljavac
          graaljavac -version
      - name: Install c deps
        if: matrix.lang == 'c'
        run: |
          sudo apt-get install -y libapr1 libapr1-dev
      - name: Install fortran
        if: matrix.lang == 'fortran'
        run: |
          gfortran-9 --version
          gfortran-10 --version
          sudo conda install lfortran -c conda-forge
          lfortran --version
          sudo apt-get install -y flang libgmp-dev
          flang --version
      - name: Install loom, graalvm native-image
        if: matrix.lang == 'java'
        run: |
          wget https://download.java.net/java/early_access/loom/6/openjdk-17-loom+6-225_linux-x64_bin.tar.gz
          tar -xvf openjdk-17-loom+6-225_linux-x64_bin.tar.gz
          sudo ln -sf $PWD/jdk-17/bin/javac /usr/bin/loomjavac
          sudo ln -sf $PWD/jdk-17/bin/java /usr/bin/loomjava
          loomjavac -version
          loomjava -version
          sudo gu install native-image
          sudo ln -sf $HOME/graalvm-ce-java11/bin/native-image /usr/bin/native-image
          native-image --version
      - name: Install graalnode
        if: matrix.lang == 'javascript'
        run: |
          sudo gu install nodejs || echo 'graal nodejs already installed'
          sudo ln -sf $HOME/graalvm-ce-java11/bin/node /usr/bin/graalnode
          graalnode --version
      - name: Install Erlang VM
        if: matrix.lang == 'erlang' || matrix.lang == 'elixir'
        run: |
          # wget -O- https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | sudo apt-key add -
          # echo "deb https://packages.erlang-solutions.com/ubuntu focal contrib" | sudo tee /etc/apt/sources.list.d/rabbitmq.list
          # sudo apt update -y
          # sudo apt-get upgrade erlang -y
          erl -eval '{ok, Version} = file:read_file(filename:join([code:root_dir(), "releases", erlang:system_info(otp_release), "OTP_VERSION"])), io:fwrite(Version), halt().' -noshell
          escript || echo ''
      - name: Install lua
        if: matrix.lang == 'lua'
        run: |
          cd /tmp
          sudo apt-get install lua5.3 -y
          lua -v
          git clone https://github.com/LuaJIT/LuaJIT
          cd LuaJIT
          make && sudo make install
          sudo ln -sf luajit-2.1.0-beta3 /usr/local/bin/luajit
          luajit -v
      - name: Install zig
        if: matrix.lang == 'zig'
        run: |
          sudo snap install zig --classic --edge
          zig version
      - name: Install crystal
        if: matrix.lang == 'crystal'
        run: |
          # https://crystal-lang.org/install/on_ubuntu/
          curl -fsSL https://crystal-lang.org/install.sh | sudo bash
          sudo apt install -y libgmp-dev
          crystal version
      - name: Install python
        if: matrix.lang == 'python'
        run: |
          cd /tmp
          wget https://github.com/pyston/pyston/releases/download/v2.1/pyston_2.1_20.04.deb
          sudo apt install -y ./pyston_2.1_20.04.deb
          pyston -V
          sudo gu install python
          sudo ln -sf $GRAALVM_11_ROOT/bin/graalpython /usr/bin/graalpython
          graalpython --version
      - name: Install ruby
        if: matrix.lang == 'ruby'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3 # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Install truffleruby
        if: matrix.lang == 'ruby'
        run: |
          sudo gu install ruby
          sudo ln -sf $HOME/graalvm-ce-java11/bin/truffleruby /usr/bin/truffleruby
          truffleruby --version
      - name: Install dart
        if: matrix.lang == 'dart'
        run: |
          sudo sh -c 'wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
          sudo sh -c 'wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'
          sudo apt-get update -y
          sudo apt-get install dart -y
          echo 'export PATH="$PATH:/usr/lib/dart/bin"' >> $PROFILE
      - name: Install vlang
        if: matrix.lang == 'vlang'
        run: |
          docker run --rm -v /tmp/hostlib/:/working/ -w /working/ thevlang/vlang:alpine cp /lib/ld-musl-x86_64.so.1 .
          sudo cp /tmp/hostlib/ld-musl-x86_64.so.1 /lib/
          sudo apt install -y libgc-dev
          git clone https://github.com/vlang/v /tmp/vlang
          pushd /tmp/vlang
          make && ./v -version
          sudo ./v symlink
          popd
          v --version
      - name: Install deno
        if: matrix.lang == 'typescript' || matrix.lang == 'rust' || matrix.lang == 'wasm'
        run: |
          curl -fsSL https://deno.land/x/install/install.sh | sh
          echo 'export PATH=$HOME/.deno/bin:$PATH' >> $PROFILE
      - name: Install wasm
        if: matrix.lang == 'rust'
        run: |
          sudo gu install wasm
          sudo ln -sf $HOME/graalvm-ce-java11/bin/wasm /usr/bin/graalwasm
          graalwasm --version
          curl https://get.wasmer.io -sSfL | sh
          cat $HOME/.wasmer/wasmer.sh >> $PROFILE
          curl https://wasmtime.dev/install.sh -sSf | bash
          echo 'PATH=$HOME/.wasmtime/bin:$PATH' >> $PROFILE
          cat $PROFILE
      - name: Build
        run: |
          source $PROFILE
          pushd bench
          dotnet run -c Release -p tool -- --task build --langs ${{ matrix.lang }} 
          popd
      - name: Test
        run: |
          source $PROFILE
          pushd bench
          dotnet run -c Release -p tool -- --task test --langs ${{ matrix.lang }} 
          popd
      - name: Bench
        run: |
          source $PROFILE
          pushd bench
          dotnet run -c Release -p tool -- --task bench --langs ${{ matrix.lang }} 
          popd
      - uses: actions/upload-artifact@v2
        with:
          name: log
          path: bench/build/_results/**/*.json
          if-no-files-found: error
